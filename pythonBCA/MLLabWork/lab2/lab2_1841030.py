# -*- coding: utf-8 -*-
"""Lab2_1841030.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U_3rKRgDHR_x0i5G2UkXIBX89a3ZcyEx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import load_wine
data = load_wine()

"""Converting DataFrame"""

data = pd.DataFrame(data=np.c_[data['data'],data['target']],
columns=data['feature_names']+['target'])

data.head()

data['target'].values

data.isnull().any()

data.shape
data.columns

x = data.drop(['target'],axis=1)
y = data['target']

x.shape
y.shape

x.head

"""Training Model Now"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.2,random_state=50)
model_no_scaling = KNeighborsClassifier(n_neighbors=5)
model_no_scaling.fit(X_train,Y_train)
model_no_scaling.score(X_test,Y_test)

"""Checking Training and Testsing Result"""

print("The Training Accuracy is : {}".format(model_no_scaling.score(X_train,Y_train)))
print("The Testing Accuracy is : {} ".format(model_no_scaling.score(X_test,Y_test)))

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled=scaler.fit_transform(x)
X_scaled

"""Training with scaling the model

i) First Checking The Accuracy
"""

X_scaled_train,X_scaled_test,Y_train,Y_test = train_test_split(X_scaled,y,test_size=0.2,random_state=50)
model_with_scaling = KNeighborsClassifier(n_neighbors=5)
model_with_scaling.fit(X_scaled_train,Y_train)
model_with_scaling.score(X_scaled_test,Y_test)

print("TRAIN ACCURACY : {}".format(model_with_scaling.score(X_scaled_train,Y_train)))
print("TEST ACCURACY : {} ".format(model_with_scaling.score(X_scaled_test,Y_test)))

"""Accuracy Increases By 20% so we can conclude scaling data can increase accuracy.

ii) Impact of K Value on Accuracy
"""

k = np.arange(1,100,1)
score_values=[]
for i in k:
  model_with_scaling = KNeighborsClassifier(n_neighbors=i)
  model_with_scaling.fit(X_scaled_train,Y_train)
  score_values.append(model_with_scaling.score(X_scaled_test,Y_test))

score_values[:10]

score_array = np.array(score_values,dtype="float32")

# Visulalization of Accuracy of model according to k values
plt.figure(figsize=(12,10))
plt.plot(k,score_array,c='black')
plt.xlabel("K (Nearest Neighbours)")
plt.ylabel("Accuracy")

"""Impact of reducing/increasing training data on accuracy

We used a ratio of 80:20 in the before model now lets train data with different ratio.
"""

r = np.arange(0.1,1,0.1)
score_impact=[]
for i in r:
 X_train_change,X_test_change,Y_train_change,Y_test_change = train_test_split(X_scaled,y,test_size=0.3,random_state=50)

 model_with_scaling = KNeighborsClassifier(n_neighbors=5)
 model_with_scaling.fit(X_scaled_train,Y_train)
 
 score_impact.append(model_with_scaling.score(X_test_change,Y_test_change))

score_impact

score_change_array = np.array(score_impact,dtype="float32")
score_change_array

# Visulalization of Accuracy of model
plt.figure(figsize=(10,7))
plt.plot(r,score_change_array,c='black')
plt.xlabel("Size ")
plt.ylabel("Accuracy ")

"""4. Any one approach of analyzing the performance of KNN based on the vide
For this we will be using one feature column to explain the performance of KNN algorithm.
"""

colours = ['black', 'orange', 'blue']
species = [0,1,2]

plt.figure(figsize=(10,7))
for i in range (0,3):
 species_df = data[data['target'] == species[i]]
 plt.scatter(
 species_df['alcohol'],
 species_df['malic_acid'],
 color=colours[i],
 alpha=0.5,
 label=species[i]
 )
plt.scatter(13.25,3,c="red",marker="x",s=100)
plt.xlabel('Alcohol')
plt.ylabel('Malic Acid')
plt.title('Alcohol Vs. Malic Acid')
plt.legend(loc='lower right')

plt.show()

"""Here in this graph we have selected to feature from the "wine" dataset the "alco
data points are differentiated by target class (0,1,2).
As we can see the 5 nearest neighbors for the point depicted by "x" , majority a
classify the point "x" as class 2.
"""